{
  "belts": [
    {
      "name": "White Belt",
      "color": "#FFFFFF",
      "startDay": 1,
      "endDay": 10,
      "requiredDays": 10,
      "description": "Python Basics - Variables, Data Types, and Basic Operations",
      "days": [
        {
          "day": 1,
          "title": "Getting Started with Python",
          "content": "Welcome to Python! Today we'll learn the basics of Python programming, including variables, data types, and basic operations.\n\nPython is a high-level, interpreted programming language known for its simplicity and readability. Let's start with the basics:\n\n1. Print Function:\nThe print() function is used to output text to the console.\nExample: print('Hello, World!')\n\n2. Comments:\nComments help explain your code and are ignored by Python.\nUse # for single-line comments\nUse ''' or \"\"\" for multi-line comments\n\n3. Basic Syntax:\n- Python uses indentation to define code blocks\n- Statements don't need semicolons\n- Case sensitive (name â‰  Name)",
          "exercise": {
            "title": "Your First Program",
            "description": "Write a program that prints 'Hello, Sensei!' and then prints your name on a new line.",
            "starterCode": "# Write your first Python program\n# 1. Print 'Hello, Sensei!'\n# 2. Print your name\n\n",
            "hint": "Use the print() function for each line",
            "test_cases": [
              {
                "input": "",
                "expected": "Hello, Sensei!\n",
                "description": "Basic output test"
              }
            ]
          }
        },
        {
          "day": 2,
          "title": "Variables and Data Types",
          "content": "In Python, variables are used to store data. Python has several basic data types:\n\n1. Strings (str):\n   - Text data enclosed in quotes\n   - Example: name = 'John'\n\n2. Integers (int):\n   - Whole numbers\n   - Example: age = 25\n\n3. Floating-point numbers (float):\n   - Decimal numbers\n   - Example: height = 5.9\n\n4. Booleans (bool):\n   - True or False values\n   - Example: is_student = True\n\nType Conversion:\n- str(): Convert to string\n- int(): Convert to integer\n- float(): Convert to float\n- bool(): Convert to boolean",
          "exercise": {
            "title": "Variable Practice",
            "description": "Create variables for your name (string), age (integer), and height (float). Print them in a formatted way.",
            "starterCode": "# Create your variables here\n# name = 'Your Name'\n# age = Your Age\n# height = Your Height\n\n# Print your variables\n",
            "hint": "Remember to use appropriate data types for each variable",
            "test_cases": [
              {
                "input": "",
                "expected": "",
                "description": "Variable declaration test"
              }
            ]
          }
        },
        {
          "day": 3,
          "title": "Basic Operations",
          "content": "Python supports various mathematical and string operations:\n\nMathematical Operations:\n1. Addition: +\n2. Subtraction: -\n3. Multiplication: *\n4. Division: /\n5. Integer Division: //\n6. Modulus (remainder): %\n7. Exponentiation: **\n\nString Operations:\n1. Concatenation: +\n2. Repetition: *\n3. Indexing: string[index]\n4. Slicing: string[start:end]\n\nExample:\nx = 10\ny = 3\nprint(x + y)  # 13\nprint(x * y)  # 30\n\nname = 'Python'\nprint(name + ' Programming')  # Python Programming\nprint(name * 2)  # PythonPython",
          "exercise": {
            "title": "Calculator",
            "description": "Write a program that performs basic arithmetic operations on two numbers.",
            "starterCode": "# Create two variables: num1 = 10, num2 = 5\n\n# Print their sum, difference, product, and quotient\n",
            "hint": "Use the basic arithmetic operators (+, -, *, /)",
            "test_cases": [
              {
                "input": "",
                "expected": "15\n5\n50\n2.0\n",
                "description": "Basic arithmetic test"
              }
            ]
          }
        },
        {
          "day": 4,
          "title": "String Methods",
          "content": "Python strings come with many useful built-in methods:\n\n1. len(): Get string length\n   length = len('Python')  # 6\n\n2. upper(): Convert to uppercase\n   'python'.upper()  # 'PYTHON'\n\n3. lower(): Convert to lowercase\n   'PYTHON'.lower()  # 'python'\n\n4. strip(): Remove whitespace\n   ' python '.strip()  # 'python'\n\n5. replace(): Replace text\n   'Hello'.replace('H', 'h')  # 'hello'\n\n6. split(): Split string into list\n   'a,b,c'.split(',')  # ['a', 'b', 'c']",
          "exercise": {
            "title": "Simple String Methods",
            "description": "Write a program that converts a string to uppercase and prints it.",
            "starterCode": "message = 'hello world'\n\n# Convert to uppercase and print\n",
            "hint": "Use the upper() method",
            "test_cases": [
              {
                "input": "",
                "expected": "HELLO WORLD\n",
                "description": "Simple uppercase test"
              }
            ]
          }
        },
        {
          "day": 5,
          "title": "User Input and Age Calculator",
          "content": "In Python, we can get input from users using the input() function. Let's create an age calculator that:\n\n1. Asks for the user's birth year\n2. Calculates their age\n3. Displays the result",
          "exercise": {
            "title": "Age Calculator",
            "description": "Create a program that asks for the user's birth year and calculates their age. Use input() to get the birth year.",
            "starterCode": "# Ask for birth year\nbirth_year = int(input('Enter your birth year: '))\n\n# Calculate and print the age\n",
            "hint": "Remember to convert the input to an integer using int()",
            "test_cases": [
              {
                "input": "1990",
                "expected": "Enter your birth year: You are 34 years old\n",
                "description": "Calculate age for birth year 1990"
              }
            ]
          }
        },
        {
          "day": 6,
          "title": "Boolean Operations",
          "content": "Boolean operations are fundamental for making decisions in programming:\n\n1. Comparison Operators:\n   - Equal to: ==\n   - Not equal to: !=\n   - Greater than: >\n   - Less than: <\n   - Greater than or equal to: >=\n   - Less than or equal to: <=\n\n2. Logical Operators:\n   - and: Both conditions must be True\n   - or: At least one condition must be True\n   - not: Inverts the boolean value\n\nExamples:\nx = 5\ny = 10\nprint(x < y)  # True\nprint(x == y)  # False\nprint(not x < y)  # False",
          "exercise": {
            "title": "Compare Numbers",
            "description": "Write a program that compares two numbers and prints whether the first number is greater than, less than, or equal to the second number.",
            "starterCode": "# Compare two numbers\nnum1 = 15\nnum2 = 10\n\n# Print the comparison result\n",
            "hint": "Use if-elif-else statements with comparison operators",
            "test_cases": [
              {
                "input": "",
                "expected": "15 is greater than 10\n",
                "description": "Compare two numbers"
              }
            ]
          }
        },
        {
          "day": 7,
          "title": "Basic Math Functions",
          "content": "Python's math module provides advanced mathematical functions:\n\n1. Import math module:\n   import math\n\n2. Common Math Functions:\n   - math.sqrt(): Square root\n   - math.pow(): Power\n   - math.floor(): Round down\n   - math.ceil(): Round up\n   - math.pi: Pi constant\n   - math.abs(): Absolute value\n\n3. Built-in Functions:\n   - abs(): Absolute value\n   - round(): Round number\n   - max(): Maximum value\n   - min(): Minimum value\n\nExample:\nimport math\nx = -4.7\nprint(abs(x))  # 4.7\nprint(round(x))  # -5\nprint(math.sqrt(16))  # 4.0",
          "exercise": {
            "title": "Math Calculator",
            "description": "Create a program that calculates the square root, ceiling, and floor of a number.",
            "starterCode": "import math\n\nnum = 12.7\n\n# Calculate and print:\n# 1. Square root\n# 2. Ceiling\n# 3. Floor\n",
            "hint": "Use math.sqrt(), math.ceil(), and math.floor()",
            "test_cases": [
              {
                "input": "",
                "expected": "3.5637\n13\n12\n",
                "description": "Math functions test"
              }
            ]
          }
        },
        {
          "day": 8,
          "title": "String Formatting",
          "content": "Python offers several ways to format strings:\n\n1. F-strings (Python 3.6+):\n   name = 'Alice'\n   age = 25\n   print(f'{name} is {age} years old')\n\n2. format() method:\n   print('{} is {} years old'.format(name, age))\n\n3. % operator (older style):\n   print('%s is %d years old' % (name, age))\n\n4. Format Specifiers:\n   - :.2f - Float with 2 decimals\n   - :>10 - Right align, width 10\n   - :<10 - Left align, width 10\n   - :^10 - Center align, width 10",
          "exercise": {
            "title": "Profile Formatter",
            "description": "Create a program that formats and prints user profile information.",
            "starterCode": "name = 'John Doe'\nage = 30\nheight = 1.75\n\n# Format and print profile information\n# Use different formatting methods\n",
            "hint": "Try using f-strings and format() method",
            "test_cases": [
              {
                "input": "",
                "expected": "Name: John Doe\nAge: 30\nHeight: 1.75m\n",
                "description": "String formatting test"
              }
            ]
          }
        },
        {
          "day": 9,
          "title": "Basic Error Handling",
          "content": "Error handling helps manage potential issues in your code:\n\n1. Try-Except Block:\ntry:\n    # Code that might raise an error\n    result = 10 / 0\nexcept:\n    # Handle the error\n    print('An error occurred')\n\n2. Common Exceptions:\n   - ZeroDivisionError\n   - ValueError\n   - TypeError\n   - NameError\n\n3. Multiple Except Blocks:\ntry:\n    num = int('abc')\nexcept ValueError:\n    print('Invalid number')\nexcept TypeError:\n    print('Type error')\n\n4. Finally Block:\n   - Always executes after try-except\n   - Used for cleanup operations",
          "exercise": {
            "title": "Safe Calculator",
            "description": "Create a calculator that handles potential errors (division by zero, invalid input).",
            "starterCode": "def divide(a, b):\n    # Implement division with error handling\n    pass\n\n# Test the function with various inputs\n",
            "hint": "Use try-except to handle ZeroDivisionError",
            "test_cases": [
              {
                "input": "10,2",
                "expected": "5.0\n",
                "description": "Valid division test"
              },
              {
                "input": "10,0",
                "expected": "Cannot divide by zero\n",
                "description": "Zero division test"
              }
            ]
          }
        },
        {
          "day": 10,
          "title": "Review and Practice",
          "content": "Let's review the key concepts from White Belt:\n\n1. Basic Syntax:\n   - Print statements\n   - Comments\n   - Indentation\n\n2. Variables and Data Types:\n   - Strings, integers, floats, booleans\n   - Type conversion\n\n3. Operations:\n   - Mathematical operations\n   - String operations\n   - Boolean operations\n\n4. String Methods:\n   - len(), upper(), lower()\n   - strip(), replace(), split()\n\n5. Input and Output:\n   - input() function\n   - print() function\n   - String formatting\n\n6. Error Handling:\n   - try-except blocks\n   - Common exceptions",
          "exercise": {
            "title": "Temperature Converter",
            "description": "Create a program that converts temperatures between Celsius and Fahrenheit with error handling.",
            "starterCode": "def celsius_to_fahrenheit(celsius):\n    # Formula: (C Ã— 9/5) + 32 = F\n    pass\n\ndef fahrenheit_to_celsius(fahrenheit):\n    # Formula: (F - 32) Ã— 5/9 = C\n    pass\n\n# Test both functions with error handling\n",
            "hint": "Remember to handle invalid inputs with try-except",
            "test_cases": [
              {
                "input": "100,c",
                "expected": "212.0Â°F\n",
                "description": "Celsius to Fahrenheit test"
              },
              {
                "input": "212,f",
                "expected": "100.0Â°C\n",
                "description": "Fahrenheit to Celsius test"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "Yellow Belt",
      "color": "#FFD700",
      "startDay": 11,
      "endDay": 20,
      "requiredDays": 10,
      "description": "Python Control Flow and Functions",
      "days": [
        {
          "day": 11,
          "title": "If Statements and Loops",
          "content": "Learn about conditional statements and different types of loops in Python.",
          "exercise": {
            "title": "Number Checker",
            "description": "Write a program that checks if a number is positive, negative, or zero.",
            "starterCode": "def check_number(num):\n    # Your code here\n    pass\n",
            "hint": "Use if, elif, and else statements",
            "test_cases": [
              {
                "input": "5",
                "expected": "Positive\n",
                "description": "Test positive number"
              }
            ]
          }
        },
        {
          "day": 12,
          "title": "For Loops",
          "content": "Learn about for loops and how to iterate over sequences in Python.",
          "exercise": {
            "title": "Sum Calculator",
            "description": "Write a program that calculates the sum of numbers from 1 to n.",
            "starterCode": "def calculate_sum(n):\n    # Your code here\n    pass\n",
            "hint": "Use a for loop with range()",
            "test_cases": [
              {
                "input": "5",
                "expected": "15\n",
                "description": "Sum of numbers 1 to 5"
              }
            ]
          }
        },
        {
          "day": 13,
          "title": "While Loops",
          "content": "Learn about while loops and when to use them instead of for loops.",
          "exercise": {
            "title": "Countdown Timer",
            "description": "Write a program that counts down from n to 1.",
            "starterCode": "def countdown(n):\n    # Your code here\n    pass\n",
            "hint": "Use a while loop to decrement n",
            "test_cases": [
              {
                "input": "5",
                "expected": "5\n4\n3\n2\n1\n",
                "description": "Countdown from 5"
              }
            ]
          }
        },
        {
          "day": 14,
          "title": "Functions Basics",
          "content": "Learn about functions, parameters, and return values.",
          "exercise": {
            "title": "Temperature Converter",
            "description": "Write a function that converts Celsius to Fahrenheit.",
            "starterCode": "def celsius_to_fahrenheit(celsius):\n    # Your code here\n    pass\n",
            "hint": "Formula: F = (C * 9/5) + 32",
            "test_cases": [
              {
                "input": "0",
                "expected": "32.0\n",
                "description": "Convert 0Â°C to Â°F"
              }
            ]
          }
        },
        {
          "day": 15,
          "title": "Function Parameters",
          "content": "Learn about different types of function parameters in Python.",
          "exercise": {
            "title": "Greeting Generator",
            "description": "Write a function that creates personalized greetings.",
            "starterCode": "def create_greeting(name, greeting='Hello'):\n    # Your code here\n    pass\n",
            "hint": "Use default parameters",
            "test_cases": [
              {
                "input": "John",
                "expected": "Hello, John!\n",
                "description": "Basic greeting"
              }
            ]
          }
        },
        {
          "day": 16,
          "title": "Return Values",
          "content": "Learn about returning multiple values from functions.",
          "exercise": {
            "title": "Rectangle Calculator",
            "description": "Write a function that returns both area and perimeter of a rectangle.",
            "starterCode": "def calculate_rectangle(length, width):\n    # Your code here\n    pass\n",
            "hint": "Return multiple values using a tuple",
            "test_cases": [
              {
                "input": "4,5",
                "expected": "Area: 20, Perimeter: 18\n",
                "description": "Calculate rectangle properties"
              }
            ]
          }
        },
        {
          "day": 17,
          "title": "Nested Functions",
          "content": "Learn about defining functions inside other functions.",
          "exercise": {
            "title": "Power Calculator",
            "description": "Write a function that returns powers of a number.",
            "starterCode": "def create_power_function(power):\n    # Your code here\n    pass\n",
            "hint": "Use a nested function",
            "test_cases": [
              {
                "input": "2,3",
                "expected": "8\n",
                "description": "Calculate 2^3"
              }
            ]
          }
        },
        {
          "day": 18,
          "title": "Lambda Functions",
          "content": "Learn about anonymous functions in Python.",
          "exercise": {
            "title": "Sorting with Lambda",
            "description": "Write a program that sorts a list of tuples using a lambda function.",
            "starterCode": "def sort_by_second(pairs):\n    # Your code here\n    pass\n",
            "hint": "Use sorted() with a lambda key",
            "test_cases": [
              {
                "input": "[(1,2), (3,1), (4,0)]",
                "expected": "[(4,0), (3,1), (1,2)]\n",
                "description": "Sort by second element"
              }
            ]
          }
        },
        {
          "day": 19,
          "title": "List Comprehension",
          "content": "Learn about creating lists using comprehension syntax.",
          "exercise": {
            "title": "Even Number Filter",
            "description": "Write a program that filters even numbers using list comprehension.",
            "starterCode": "def get_even_numbers(numbers):\n    # Your code here\n    pass\n",
            "hint": "Use list comprehension with a condition",
            "test_cases": [
              {
                "input": "[1,2,3,4,5,6]",
                "expected": "[2,4,6]\n",
                "description": "Filter even numbers"
              }
            ]
          }
        },
        {
          "day": 20,
          "title": "Error Handling",
          "content": "Learn about try-except blocks and handling exceptions.",
          "exercise": {
            "title": "Safe Division",
            "description": "Write a function that safely divides two numbers.",
            "starterCode": "def safe_divide(a, b):\n    # Your code here\n    pass\n",
            "hint": "Use try-except to handle ZeroDivisionError",
            "test_cases": [
              {
                "input": "10,2",
                "expected": "5.0\n",
                "description": "Normal division"
              },
              {
                "input": "10,0",
                "expected": "Error: Cannot divide by zero\n",
                "description": "Division by zero"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "Orange Belt",
      "color": "#FFA500",
      "startDay": 21,
      "endDay": 30,
      "requiredDays": 10,
      "description": "Python Data Structures and File Handling",
      "days": [
        {
          "day": 21,
          "title": "Lists Basics",
          "content": "Learn about Python lists and basic operations.",
          "exercise": {
            "title": "List Operations",
            "description": "Write functions to perform basic list operations.",
            "starterCode": "def list_operations(numbers):\n    # Your code here\n    pass\n",
            "hint": "Use append(), insert(), and remove()",
            "test_cases": [
              {
                "input": "[1,2,3]",
                "expected": "[1,2,3,4]\n[0,1,2,3,4]\n[0,1,3,4]\n",
                "description": "Basic list operations"
              }
            ]
          }
        },
        {
          "day": 22,
          "title": "List Methods",
          "content": "Learn about advanced list methods in Python.",
          "exercise": {
            "title": "List Sorter",
            "description": "Write a program that sorts a list in both ascending and descending order.",
            "starterCode": "def sort_list(numbers):\n    # Your code here\n    pass\n",
            "hint": "Use sort() and reverse()",
            "test_cases": [
              {
                "input": "[3,1,4,1,5,9,2,6,5]",
                "expected": "Ascending: [1,1,2,3,4,5,5,6,9]\nDescending: [9,6,5,5,4,3,2,1,1]\n",
                "description": "Sort list both ways"
              }
            ]
          }
        },
        {
          "day": 23,
          "title": "Dictionaries",
          "content": "Learn about Python dictionaries and key-value pairs.",
          "exercise": {
            "title": "Word Counter",
            "description": "Write a program that counts word frequency in a sentence.",
            "starterCode": "def count_words(sentence):\n    # Your code here\n    pass\n",
            "hint": "Use a dictionary to store word counts",
            "test_cases": [
              {
                "input": "hello world hello python",
                "expected": "{'hello': 2, 'world': 1, 'python': 1}\n",
                "description": "Count word frequency"
              }
            ]
          }
        },
        {
          "day": 24,
          "title": "Sets",
          "content": "Learn about Python sets and their operations.",
          "exercise": {
            "title": "Unique Numbers",
            "description": "Write a program that finds unique elements from two lists.",
            "starterCode": "def find_unique(list1, list2):\n    # Your code here\n    pass\n",
            "hint": "Use set operations",
            "test_cases": [
              {
                "input": "[1,2,3], [2,3,4]",
                "expected": "Unique in list1: {1}\nUnique in list2: {4}\nCommon: {2,3}\n",
                "description": "Find unique elements"
              }
            ]
          }
        },
        {
          "day": 25,
          "title": "Tuples",
          "content": "Learn about Python tuples and their immutability.",
          "exercise": {
            "title": "Coordinate System",
            "description": "Write a program that handles 2D coordinates using tuples.",
            "starterCode": "def calculate_distance(point1, point2):\n    # Your code here\n    pass\n",
            "hint": "Use tuple unpacking and math.sqrt()",
            "test_cases": [
              {
                "input": "(0,0), (3,4)",
                "expected": "5.0\n",
                "description": "Calculate distance between points"
              }
            ]
          }
        },
        {
          "day": 26,
          "title": "File Reading",
          "content": "Learn about reading files in Python.",
          "exercise": {
            "title": "File Reader",
            "description": "Write a program that reads a file and counts the lines.",
            "starterCode": "def count_lines(filename):\n    # Your code here\n    pass\n",
            "hint": "Use with open() and readlines()",
            "test_cases": [
              {
                "input": "test.txt",
                "expected": "Number of lines: 5\n",
                "description": "Count file lines"
              }
            ]
          }
        },
        {
          "day": 27,
          "title": "File Writing",
          "content": "Learn about writing to files in Python.",
          "exercise": {
            "title": "File Writer",
            "description": "Write a program that creates a log file with timestamps.",
            "starterCode": "def create_log(filename, messages):\n    # Your code here\n    pass\n",
            "hint": "Use with open() in write mode",
            "test_cases": [
              {
                "input": "log.txt, ['Start', 'Processing', 'End']",
                "expected": "Log file created with 3 entries\n",
                "description": "Create log file"
              }
            ]
          }
        },
        {
          "day": 28,
          "title": "JSON Handling",
          "content": "Learn about working with JSON data in Python.",
          "exercise": {
            "title": "JSON Parser",
            "description": "Write a program that reads and modifies JSON data.",
            "starterCode": "def update_json(data, key, value):\n    # Your code here\n    pass\n",
            "hint": "Use json.loads() and json.dumps()",
            "test_cases": [
              {
                "input": "{'name': 'John'}, 'age', 25",
                "expected": "{'name': 'John', 'age': 25}\n",
                "description": "Update JSON data"
              }
            ]
          }
        },
        {
          "day": 29,
          "title": "CSV Files",
          "content": "Learn about working with CSV files in Python.",
          "exercise": {
            "title": "CSV Processor",
            "description": "Write a program that reads and processes CSV data.",
            "starterCode": "def process_csv(filename):\n    # Your code here\n    pass\n",
            "hint": "Use the csv module",
            "test_cases": [
              {
                "input": "data.csv",
                "expected": "Total rows: 10\nAverage age: 35\n",
                "description": "Process CSV data"
              }
            ]
          }
        },
        {
          "day": 30,
          "title": "File System Operations",
          "content": "Learn about working with directories and paths.",
          "exercise": {
            "title": "File Organizer",
            "description": "Write a program that organizes files by extension.",
            "starterCode": "def organize_files(directory):\n    # Your code here\n    pass\n",
            "hint": "Use os.path and shutil",
            "test_cases": [
              {
                "input": "./files",
                "expected": "Organized 10 files into 3 categories\n",
                "description": "Organize files by type"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "Green Belt",
      "color": "#008000",
      "startDay": 31,
      "endDay": 45,
      "requiredDays": 15,
      "description": "Object-Oriented Programming - Classes, Objects, and Inheritance",
      "days": []
    },
    {
      "name": "Blue Belt",
      "color": "#0000FF",
      "startDay": 46,
      "endDay": 60,
      "requiredDays": 15,
      "description": "File Operations & Error Handling - File I/O and Exception Handling",
      "days": []
    },
    {
      "name": "Purple Belt",
      "color": "#800080",
      "startDay": 61,
      "endDay": 75,
      "requiredDays": 15,
      "description": "Advanced Python - Decorators, Generators, and Context Managers",
      "days": []
    },
    {
      "name": "Brown Belt",
      "color": "#8B4513",
      "startDay": 76,
      "endDay": 85,
      "requiredDays": 10,
      "description": "Web Development - Flask, APIs, and Database Integration",
      "days": []
    },
    {
      "name": "Red Belt",
      "color": "#FF0000",
      "startDay": 86,
      "endDay": 95,
      "requiredDays": 10,
      "description": "Data Science & Machine Learning - NumPy, Pandas, and Scikit-learn",
      "days": []
    },
    {
      "name": "Black Belt",
      "color": "#000000",
      "startDay": 96,
      "endDay": 100,
      "requiredDays": 5,
      "description": "Advanced Projects & Mastery - Full Stack Development and AI",
      "days": []
    }
  ]
}
